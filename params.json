{"name":"Commercial Detection","tagline":"Google Summer of Code 2015, Red Hen Labs","body":"# Commercial Detection\r\nThe project allows automatic detection and identification of commercials in a TV stream. With information like this, you have the freedom to skip all commercials, or watch only those you enjoy. It results in huge amount of space reduction in recorded TV videos, if we opt to delete all commercials in the video.\r\n\r\nThere may be times when the program will not identify the commercials correctly, in such a case there is an interface set up where the user may tag the correct output. The system then learns from what the user tagged and improves so that it does not make such mistakes again.\r\n\r\n# Dependencies\r\nThere is a shell script called dependencies.sh, which installs the required dependencies.\r\n\r\n# Instructions to run\r\npython main.py |path-to-video|\r\n\r\n# Note\r\nThe project is still under development so some of the features are still unavailable as of now. \r\n\r\n# Current work\r\n## Concepts\r\nThe initial part of the project would be to clearly distinguish between commercials and TV. A naive way to look at it would be to detect a scene change in the video, i.e to search for blank screens. There is however a problem with blank screens, some TV channels have their logo on all the time, so the screen is never totally blank even during a shift from TV to commercial, sometimes there are blank screens, when there is a change of scene in the TV as well. Thus a video based approach would be futile.\r\n\r\nFor now the audio based approach seems to be good in dividing the video into blocks. The audio always fades out, drops to a zero and then the next block of commercial or TV starts, we can see this clearly in the two pits formed in the spectrographs generated by the code. A spectrograph is just a plot of the variation of amplitude with time and frequency. The red regions indicate high values of amplitude, yellow regions relatively lower and so on. We see that the amplitude for all frequencies is very low in the gap between a transition from one block of the video to the other, this is the concept used in designing an algorithm to segment the video into blocks. \r\n\r\n## Progress\r\nCurrently the code gives us the following functionality:\r\n+ Obtain the audio part from the video.\r\n+ Obtain the spectrograph of the audio.\r\n+ Finding location of pits (Currently finding all pits, should make it find deep pits alone)\r\n\r\n## Future plan\r\nThe following would be the short term path that this project will take:\r\n* Take duration of each block to be a feature and implement a classifier which can take in any number of such features and classify whether its a commercial or TV.\r\n* Test rigorously whether it works 100% of the time.\r\n* Delve deeper into CCExtractor to see if anything would be helpful as features.\r\n* Design a classifier to identify ads using audio fingerprinting method.\r\n* Check whether pitch, ZCD and energy of the audio will prove to be good features.","google":"UA-62716746-1","note":"Don't delete this file! It's used internally to help with page regeneration."}