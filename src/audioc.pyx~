import numpy as np
from scipy.io import wavfile
import timeFunc
import hickle
from constants import *

class DetectSilence(object):
    
    def __init__(self, audio_name):
        
        self.audio_name = audio_name
        self.X = np.array([])
        self.Fs = None
        self.times = []
        self.times_dic = {}
                
    def get_data(self, window, overlap):

        """
            Gets the freq region of data
            audio_name = name of the audio file
            Window = size of the window in seconds, by default it creates a window of 2 milliseconds
            Overlap = ratio of overlap between frames
        """
        self.Fs, frames = wavfile.read(self.audio_name)
        start = 0
        i = window
        m = 0
        self.X = hickle.load('../data/newdat.hkl')
        print self.X.shape
        print len(frames) / (window * self.Fs)
        assert False
#        while ((i*self.Fs) < len(frames)):
#        
#            print timeFunc.get_time_string(i)
#            end = start + int(self.Fs * window)
#            x = np.array(frames[start:end]) + 0.0000001#To remove any zero errors
#            print x.shape, start, end
#            print end-start
#            self.X = np.append(self.X, np.abs(np.fft.rfft(x)))
#            start += int(self.Fs * (1 - overlap) * window)
#            i += window
#            m += 1
#        
#        print self.X.shape
#        print m, self.Fs/4
#        self.X = np.reshape(self.X, (m, len(magnitudes)))
#        hickle.dump(self.X, '../data/newdat.hkl', mode='w')

    def detect(self):
        
#        self.X = hickle.load('../data/newdat.hkl')
        m,n= self.X.shape
        print m, n
        
        freqs = np.abs(np.fft.fftfreq(n, 1.0/44100))
        times = []
        for i in range(m):
            magnitudes = self.X[i, :]
            val = (np.max(magnitudes) + np.min(magnitudes)) / (np.var(magnitudes))
            val *= 100
            print timeFunc.get_time_string(i * WINDOW_SIZE), val
            if val > 1:
                ts = timeFunc.get_time_string(i * WINDOW_SIZE)
                try:
                    self.times_dic[ts] += 1
                except:
                    self.times_dic[ts] = 0
#                times.append()

        j = 0
        times = self.times_dic.keys()
        times.sort
        for time in times:
            if self.times_dic[time] == 0: #Occurred only once, very low chances of it being valid
                del self.times_dic[time]
        self.times = self.times_dic.keys()
        print self.times_dic
        self.times.sort()
    
    def get_times(self, window=WINDOW_SIZE, overlap=OVERLAP):
        
        self.get_data(window, overlap)
        self.detect()
        return self.times
#            
#def test():
#    
#    print "running"
#    print DetectSilence(TEMP_AUDIO).get_times()
#    print "Done with all"
#    
#test()
